[
  {
    "description": "Documentation stream intended for use within the gulp system.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "lineNumber": 3,
        "name": "documentation"
      },
      {
        "title": "param",
        "description": "output options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "either 'html', 'md', 'json', or 'docset'",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.format"
          },
          {
            "title": "param",
            "description": "custom filename for md or json output",
            "lineNumber": 6,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filename"
          }
        ]
      },
      {
        "title": "param",
        "description": "either 'html', 'md', 'json', or 'docset'",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "options.format"
      },
      {
        "title": "param",
        "description": "custom filename for md or json output",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "options.filename"
      },
      {
        "title": "returns",
        "description": null,
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "stream.Transform"
        }
      },
      {
        "title": "example",
        "description": "var documentation = require('./'),\n    gulp = require('gulp');\n\ngulp.task('documentation', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'html'\n    }))\n    .pipe(gulp.dest('documentation'));\n});\n\n// documentation with JSON output, default filename API.md\ngulp.task('documentation-json', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'json'\n    }))\n    .pipe(gulp.dest('documentation'));\n});\n\n// documentation with markdown output, default filename API.md\ngulp.task('documentation-md', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'md'\n    }))\n    .pipe(gulp.dest('documentation'));\n});",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 5,
        "column": 0
      },
      "end": {
        "line": 42,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 73,
          "column": 2
        }
      },
      "file": "/Users/tmcw/src/gulp-documentation/index.js",
      "code": "var through2 = require('through2'),\n  File = require('vinyl'),\n  documentation = require('documentation');\n\n/**\n * Documentation stream intended for use within the gulp system.\n *\n * @name documentation\n * @param {Object} options output options\n * @param {string} options.format either 'html', 'md', 'json', or 'docset'\n * @param {string} options.filename custom filename for md or json output\n * @returns {stream.Transform}\n * @example\n * var documentation = require('./'),\n *     gulp = require('gulp');\n *\n * gulp.task('documentation', function () {\n *   gulp.src('./index.js')\n *     .pipe(documentation({\n *       format: 'html'\n *     }))\n *     .pipe(gulp.dest('documentation'));\n * });\n *\n * // documentation with JSON output, default filename API.md\n * gulp.task('documentation-json', function () {\n *   gulp.src('./index.js')\n *     .pipe(documentation({\n *       format: 'json'\n *     }))\n *     .pipe(gulp.dest('documentation'));\n * });\n *\n * // documentation with markdown output, default filename API.md\n * gulp.task('documentation-md', function () {\n *   gulp.src('./index.js')\n *     .pipe(documentation({\n *       format: 'md'\n *     }))\n *     .pipe(gulp.dest('documentation'));\n * });\n */\nmodule.exports = function (options) {\n  options = options || {};\n  var files = [];\n  options.format = options.format || 'html';\n  var formatter = documentation.formats[options.format];\n  if (!formatter) {\n    throw new Error('invalid format given: valid options are ' + Object.keys(documentation.formats).join(', '));\n  }\n  return through2.obj(function document(file, enc, cb) {\n    files.push(file);\n    cb();\n  }, function (cb) {\n    documentation(files.map(function(file) {\n      return file.path;\n    }), {}, function(err, comments) {\n      formatter(comments, {}, function (err, output) {\n        if (options.format === 'json' || options.format === 'md') {\n          this.push(new File({\n            path: options.filename || 'API.' + options.format,\n            contents: new Buffer(output)\n          }));\n        } else if (options.format === 'html') {\n          output.forEach(function(file) {\n            this.push(file);\n          }.bind(this));\n        }\n        cb();\n      }.bind(this));\n    }.bind(this));\n  });\n};\n"
    },
    "name": "documentation",
    "params": [
      {
        "title": "param",
        "description": "output options",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "either 'html', 'md', 'json', or 'docset'",
            "lineNumber": 5,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.format"
          },
          {
            "title": "param",
            "description": "custom filename for md or json output",
            "lineNumber": 6,
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "options.filename"
          }
        ]
      }
    ],
    "returns": [
      {
        "title": "returns",
        "description": null,
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "stream.Transform"
        }
      }
    ],
    "examples": [
      "var documentation = require('./'),\n    gulp = require('gulp');\n\ngulp.task('documentation', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'html'\n    }))\n    .pipe(gulp.dest('documentation'));\n});\n\n// documentation with JSON output, default filename API.md\ngulp.task('documentation-json', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'json'\n    }))\n    .pipe(gulp.dest('documentation'));\n});\n\n// documentation with markdown output, default filename API.md\ngulp.task('documentation-md', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'md'\n    }))\n    .pipe(gulp.dest('documentation'));\n});"
    ],
    "kind": "function",
    "memberof": "module",
    "scope": "static",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "documentation"
    ]
  }
]