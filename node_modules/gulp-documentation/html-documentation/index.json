[{"description":"Documentation stream intended for use within the gulp system.","tags":[{"title":"name","description":null,"name":"documentation"},{"title":"param","description":"output options","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"either 'html', 'md', 'json', or 'docset'","type":{"type":"NameExpression","name":"string"},"name":"options.format"},{"title":"param","description":"custom filename for md or json output","type":{"type":"NameExpression","name":"string"},"name":"options.filename"},{"title":"returns","description":null,"type":{"type":"NameExpression","name":"stream.Transform"}},{"title":"example","description":"var documentation = require('./'),\n    gulp = require('gulp');\n\ngulp.task('documentation', function () {\n  gulp.src('./index.js')\n    .pipe(documentation({\n      format: 'html'\n    }))\n    .pipe(gulp.dest('documentation'));\n});"},{"title":"memberof","description":"module"},{"title":"static"}],"context":{"loc":{"start":{"line":26,"column":0},"end":{"line":58,"column":2}},"file":"/Users/tmcw/src/gulp-documentation/index.js","code":"var through2 = require('through2'),\n  File = require('vinyl'),\n  concat = require('concat-stream'),\n  documentation = require('documentation');\n\n/**\n * Documentation stream intended for use within the gulp system.\n *\n * @name documentation\n * @param {Object} options output options\n * @param {string} options.format either 'html', 'md', 'json', or 'docset'\n * @param {string} options.filename custom filename for md or json output\n * @returns {stream.Transform}\n * @example\n * var documentation = require('./'),\n *     gulp = require('gulp');\n *\n * gulp.task('documentation', function () {\n *   gulp.src('./index.js')\n *     .pipe(documentation({\n *       format: 'html'\n *     }))\n *     .pipe(gulp.dest('documentation'));\n * });\n */\nmodule.exports = function (options) {\n  options = options || {};\n  var files = [];\n  options.format = options.format || 'html';\n  var format = documentation.formats[options.format];\n  if (!format) {\n    console.error('invalid format given: valid options are ' + Object.keys(documentation.formats).join(', '));\n  }\n  return through2.obj(function document(file, enc, cb) {\n    files.push(file);\n    cb();\n  }, function () {\n    var that = this;\n    documentation(files.map(function(file) {\n      return file.path;\n    }))\n    .pipe(format(options))\n    .pipe(concat(function (output) {\n      if (typeof output === 'string') {\n        that.push(new File({\n          path: options.filename || 'API.' + options.format,\n          contents: new Buffer(output)\n        }));\n      } else if (Array.isArray(output)) {\n        output.forEach(function(f) {\n          that.push(f);\n        });\n      } else {\n        console.error('unknown type detected');\n      }\n    }));\n  });\n};"},"name":"documentation","params":[{"title":"param","description":"output options","type":{"type":"NameExpression","name":"Object"},"name":"options"},{"title":"param","description":"either 'html', 'md', 'json', or 'docset'","type":{"type":"NameExpression","name":"string"},"name":"options.format"},{"title":"param","description":"custom filename for md or json output","type":{"type":"NameExpression","name":"string"},"name":"options.filename"}],"returns":[{"title":"returns","description":null,"type":{"type":"NameExpression","name":"stream.Transform"}}],"examples":["<span class=\"hljs-keyword\">var</span> documentation = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./'</span>),\n    gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>);\n\ngulp.task(<span class=\"hljs-string\">'documentation'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  gulp.src(<span class=\"hljs-string\">'./index.js'</span>)\n    .pipe(documentation({\n      format: <span class=\"hljs-string\">'html'</span>\n    }))\n    .pipe(gulp.dest(<span class=\"hljs-string\">'documentation'</span>));\n});"],"memberof":"module","scope":"static","members":{"instance":[],"static":[]},"path":["documentation"]}]