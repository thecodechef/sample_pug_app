// Generated by CoffeeScript 1.9.2
(function() {
  var File, debug, es, falloff, google, gutil, makeFilename, makeThumbnailFile, request;

  debug = require('debug')('gulp-drive');

  es = require('event-stream');

  File = require('vinyl');

  google = require('googleapis');

  request = require('request');

  gutil = require('gulp-util');

  falloff = 100;

  makeFilename = function(fileInfo) {
    var extname, filename;
    extname = '.' + fileInfo.fileExtension;
    filename = fileInfo.title;
    filename.replace(new RegExp('(' + extname + ')?$', 'i'), extname);
    return filename;
  };

  makeThumbnailFile = function(file) {
    var req, thumb;
    if (file.info.thumbnailLink) {
      thumb = new File({
        path: file.path.replace(file.base, 't/'),
        contents: new es.Stream.PassThrough
      });
      req = request.get(file.info.thumbnailLink);
      req.pipe(thumb.contents);
      req.on('error', function(err) {
        return thumb.contents.emit('error', err);
      });
      return thumb;
    } else {
      return null;
    }
  };

  module.exports = function(options) {
    var OAuth2, client, clientId, clientSecret, drive, loadChildren, loadInfo, loadRecursively, plugin, pool, ref, refreshToken;
    clientId = options.clientId;
    clientSecret = options.clientSecret;
    if (!(clientId && clientSecret)) {
      throw new Error("clientId and clientSecret must be set to the values at https://console.developers.google.com/project/${app_id}/apiui/credential");
    }
    refreshToken = options.refreshToken;
    if (!refreshToken) {
      throw new Error("refreshToken must be set to a valid token");
    }
    OAuth2 = google.auth.OAuth2;
    client = new OAuth2(clientId, clientSecret, 'http://localhost/');
    client.setCredentials({
      refresh_token: refreshToken
    });
    drive = google.drive({
      version: 'v2',
      auth: client
    });
    pool = {
      maxSockets: (ref = options.maxSockets) != null ? ref : 8
    };
    loadInfo = function(metadata, callback) {
      return drive.files.get({
        fileId: metadata.id
      }, function(err, fileInfo) {
        var file;
        if (err) {
          if (err.code === 403) {
            debug("Rate limited. Trying again after %s ms", falloff);
            if (falloff > 300000) {
              return callback(err);
            }
            setTimeout(function() {
              return loadInfo(metadata, callback);
            }, falloff);
            falloff = falloff + 100;
            return;
          } else {
            return callback(err);
          }
        }
        debug("loaded info for %s", fileInfo.title);
        falloff = Math.max(falloff / 1.1, 100);
        file = new File({
          path: makeFilename(fileInfo),
          contents: new es.Stream.PassThrough
        });
        file.info = fileInfo;
        file.checksum = fileInfo.md5Checksum;
        return callback(null, file);
      });
    };
    loadChildren = function(folder) {
      this.pause();
      return drive.children.list({
        folderId: folder.info.id
      }, (function(_this) {
        return function(err, children) {
          var i, item, len, ref1, ref2;
          if (err) {
            return _this.emit('error', err);
          }
          debug("loaded folder %s with %s items", folder.path, (ref1 = children.items) != null ? ref1.length : void 0);
          ref2 = children.items || [];
          for (i = 0, len = ref2.length; i < len; i++) {
            item = ref2[i];
            _this.emit('data', item);
          }
          return _this.resume();
        };
      })(this));
    };
    loadRecursively = function(item) {
      var childDirs, childStream;
      childDirs = [];
      if (item.info.mimeType === 'application/vnd.google-apps.folder') {
        this.pause();
        childStream = es.readArray([item]).pipe(es.through(loadChildren)).pipe(es.map(loadInfo)).pipe(es.through(loadRecursively)).pipe(es.mapSync(function(file) {
          file.path = item.path + '/' + file.path;
          return file;
        }));
        childStream.on('error', function(err) {
          return this.emit('error', err);
        });
        childStream.on('data', (function(_this) {
          return function(data) {
            return _this.emit('data', data);
          };
        })(this));
        return childStream.on('end', (function(_this) {
          return function() {
            return _this.resume();
          };
        })(this));
      } else {
        return this.emit('data', item);
      }
    };
    plugin = {};
    plugin.src = function(folderId) {
      var basePath;
      basePath = '';
      return es.readArray([
        {
          id: folderId
        }
      ]).pipe(es.map(loadInfo)).pipe(es.mapSync(function(file) {
        basePath = file.path + '/';
        return file;
      })).pipe(es.through(loadRecursively)).pipe(es.mapSync(function(file) {
        file.base = basePath;
        return file;
      }));
    };
    plugin.fetch = es.through(function(file) {
      var req, thumb;
      if (file.info.webContentLink) {
        thumb = makeThumbnailFile(file);
        if (thumb) {
          this.emit('data', thumb);
          thumb.contents.on('error', (function(_this) {
            return function(err) {
              return _this.emit('error', err);
            };
          })(this));
        }
        gutil.log("Downloading '" + (gutil.colors.magenta(file.info.title)) + "' from " + (gutil.colors.blue(file.info.webContentLink)));
        req = request.get(file.info.webContentLink, {
          pool: pool
        });
        req.pipe(file.contents);
        req.on('error', (function(_this) {
          return function(err) {
            console.error("Error downloading '" + (gutil.colors.magenta(file.info.title)) + "'", err);
            return _this.emit('error', err);
          };
        })(this));
        return this.emit('data', file);
      } else {
        debug("skipping file %s", file.path);
        return file.contents.end();
      }
    });
    return plugin;
  };

}).call(this);
