/* eslint no-invalid-this: 0 */
'use strict';

var _alex = require('alex');

var _alex2 = _interopRequireDefault(_alex);

var _convertVinylToVfile = require('convert-vinyl-to-vfile');

var _convertVinylToVfile2 = _interopRequireDefault(_convertVinylToVfile);

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _readPkgUp = require('read-pkg-up');

var _readPkgUp2 = _interopRequireDefault(_readPkgUp);

var _gulpUtil = require('gulp-util');

var _vfileReporter = require('vfile-reporter');

var _vfileReporter2 = _interopRequireDefault(_vfileReporter);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var runAlex = function runAlex(callback, file) {
  var allow = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

  file.alex = (0, _alex2.default)(file.contents.toString(), allow);
  return callback(null, file);
};

module.exports = function () {
  return _through2.default.obj(function (file, encoding, callback) {
    if (!file || file.isNull()) {
      this.push();
      return callback();
    }

    (0, _findUp2.default)('.alexrc').then(function (alexRcPath) {
      if (!alexRcPath) {
        (0, _readPkgUp2.default)().then(function (_ref) {
          var pkg = _ref.pkg;

          if (pkg && pkg.alex && pkg.alex.allow) {
            return runAlex(callback, file, pkg.alex.allow);
          }

          return runAlex(callback, file);
        });
      }

      _fs2.default.readFile(alexRcPath, 'utf8', function (err, fileContents) {
        if (err) {
          throw err;
        }

        var _JSON$parse = JSON.parse(fileContents);

        var allow = _JSON$parse.allow;

        return runAlex(callback, file, allow);
      });
    });
  });
};

module.exports.reporter = function () {
  var reporterType = arguments.length <= 0 || arguments[0] === undefined ? 'default' : arguments[0];

  var failedFiles = [],
      isDefaultReporter = reporterType === 'default',
      isFailReporter = reporterType === 'fail',
      isFailImmediatelyReporter = reporterType === 'failImmediately';

  return _through2.default.obj(function (file, encoding, callback) {
    var error = null,
        foundIssues = false,
        convertedFile = undefined,
        report = undefined;

    if (!file || file.isNull()) {
      this.push();
      return callback();
    }

    convertedFile = (0, _convertVinylToVfile2.default)(file);
    convertedFile.messages = file.alex.messages;

    // default report to console
    if (isDefaultReporter) {
      report = (0, _vfileReporter2.default)(convertedFile, { quiet: true });
      if (report) {
        console.log(report);
      }
    }

    foundIssues = !!file.alex.messages.length;

    if (isFailImmediatelyReporter && foundIssues) {
      error = new _gulpUtil.PluginError('gulp-alex', {
        name: 'AlexError',
        message: 'Alex failed for ' + file.path
      });
    }

    if (isFailReporter && foundIssues) {
      failedFiles.push(file.path);
    }

    callback(error, file);
  }, function (callback) {
    if (isFailReporter && failedFiles.length) {
      this.emit('error', new _gulpUtil.PluginError('gulp-alex', {
        name: 'AlexError',
        message: 'Alex failed for ' + failedFiles.join(', ')
      }));
    }

    callback();
  });
};