/**

The MIT License (MIT)

Copyright (c) 2013-2014 Michael Herndon http://dev.michaelherndon.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

/**
 * Copies an array to another array. The way an array is copied can be changed by providing
 * a copy function that accepts the source array, current index, destination array, destination index.
 *
 * @example
 * 		var copy = require("kit/lib/copy"),
 *			arrayCopy = require("kit/lib/array-copy");
 *		
 *      // array copy that clones objects
 *		arrayCopy(["one", {test: "value"}], 0, [], 0, null, copy); 
 *
 * 
 *
 * @param {Array} source  The array that hold the values that will be copied.
 * @param {Number} [sourceIndex] The index position that the sourceIndex should start.
 * @param {Array} destination The array that the values will be copied to.
 * @param {Number} [destinationIndex]  The position of the destination array that the copy should start at.
 * @param {Number} [length] The number of items that should be copied.
 * @param {Function} [copy] The function that will override the copy action.  
 */ 
var arrayCopy = function(source, sourceIndex, destination, destinationIndex, length, copy) {
	var from = Object(source),
		i = sourceIndex || 0,
		c = destinationIndex || 0, 
		l = length || from.length,
		to = destination;

	if(l > from.length)
		l = from.length;




	if(!to)
		to = new Array(c + (l - i));
	else 
		to.length = (c + (l - i));

	if(copy)
	{
		for(; i < l; i++) {
			copy(from, c, to, i);

			c++;
		}
	}

	for(; i < l; i++) {
		to[c] = from[i];
		c++;
	}

	return to;
}

exports = arrayCopy;

module.exports = exports;