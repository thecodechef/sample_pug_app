"use strict";
require("typings-global");
var plugins = require("./gulpfunction.plugins");
module.exports = function (functionsToExecuteArg, executionModeArg) {
    if (executionModeArg === void 0) { executionModeArg = 'forEach'; }
    //important vars
    var executionMode = executionModeArg; //can be forEach or atEnd
    var functionsToExecute = functionsToExecuteArg;
    var promiseArray = [];
    var runFunction = function (functionArg) {
        var returnValue = functionArg();
        if (typeof returnValue !== "undefined" && typeof returnValue.then !== "undefined") {
            promiseArray.push(returnValue);
        }
    };
    var checkAndRunFunction = function () {
        if (typeof functionsToExecute === "function") {
            runFunction(functionsToExecute);
        }
        else if (Array.isArray(functionsToExecute)) {
            for (var anyFunction in functionsToExecute) {
                runFunction(functionsToExecute[anyFunction]);
            }
        }
        else {
            throw new Error("gulp-callfunction: something is strange with the given arguments");
        }
        return plugins.Q.all(promiseArray);
    };
    var hasExecutedOnce = false;
    var forEach = function (file, enc, cb) {
        switch (executionMode) {
            case "forEach":
                checkAndRunFunction().then(function () {
                    cb(null, file);
                });
                break;
            case "forFirst":
                !hasExecutedOnce ? checkAndRunFunction().then(function () {
                    cb(null, file);
                }) : cb(null, file);
                hasExecutedOnce = true;
                break;
            case "atEnd":
                cb(null, file);
                break;
            default:
                break;
        }
    };
    var atEnd = function (cb) {
        if (executionMode === "atEnd") {
            checkAndRunFunction().then(function () {
                cb();
            });
        }
        else {
            cb();
        }
    };
    return plugins.through2.obj(forEach, atEnd);
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFFLENBQUM7UUFDVCxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJ0eXBpbmdzLWdsb2JhbFwiO1xyXG5cclxuaW1wb3J0IHBsdWdpbnMgPSByZXF1aXJlKFwiLi9ndWxwZnVuY3Rpb24ucGx1Z2luc1wiKTtcclxuXHJcblxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZ1bmN0aW9uc1RvRXhlY3V0ZUFyZzphbnl8YW55W10sZXhlY3V0aW9uTW9kZUFyZzpzdHJpbmcgPSAnZm9yRWFjaCcpIHtcclxuICAgIC8vaW1wb3J0YW50IHZhcnNcclxuICAgIGxldCBleGVjdXRpb25Nb2RlID0gZXhlY3V0aW9uTW9kZUFyZzsgLy9jYW4gYmUgZm9yRWFjaCBvciBhdEVuZFxyXG4gICAgbGV0IGZ1bmN0aW9uc1RvRXhlY3V0ZSA9IGZ1bmN0aW9uc1RvRXhlY3V0ZUFyZztcclxuICAgIGxldCBwcm9taXNlQXJyYXkgPSBbXTtcclxuICAgIGxldCBydW5GdW5jdGlvbiA9IGZ1bmN0aW9uKGZ1bmN0aW9uQXJnKXtcclxuICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSBmdW5jdGlvbkFyZygpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmV0dXJuVmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgcHJvbWlzZUFycmF5LnB1c2gocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgbGV0IGNoZWNrQW5kUnVuRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmdW5jdGlvbnNUb0V4ZWN1dGUgPT09IFwiZnVuY3Rpb25cIiApIHtcclxuICAgICAgICAgICAgcnVuRnVuY3Rpb24oZnVuY3Rpb25zVG9FeGVjdXRlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZnVuY3Rpb25zVG9FeGVjdXRlKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhbnlGdW5jdGlvbiBpbiBmdW5jdGlvbnNUb0V4ZWN1dGUpIHtcclxuICAgICAgICAgICAgICAgIHJ1bkZ1bmN0aW9uKGZ1bmN0aW9uc1RvRXhlY3V0ZVthbnlGdW5jdGlvbl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZ3VscC1jYWxsZnVuY3Rpb246IHNvbWV0aGluZyBpcyBzdHJhbmdlIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBsdWdpbnMuUS5hbGwocHJvbWlzZUFycmF5KTtcclxuICAgIH07XHJcblxyXG4gICAgbGV0IGhhc0V4ZWN1dGVkT25jZSA9IGZhbHNlO1xyXG4gICAgbGV0IGZvckVhY2ggPSBmdW5jdGlvbiAoZmlsZSwgZW5jLCBjYikgeyAvL3RoZSBmb3JFYWNoIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZXZlcnkgY2h1bmtcclxuICAgICAgICBzd2l0Y2ggKGV4ZWN1dGlvbk1vZGUpe1xyXG4gICAgICAgICAgICBjYXNlIFwiZm9yRWFjaFwiOlxyXG4gICAgICAgICAgICAgICAgY2hlY2tBbmRSdW5GdW5jdGlvbigpLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBmaWxlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJmb3JGaXJzdFwiOlxyXG4gICAgICAgICAgICAgICAgIWhhc0V4ZWN1dGVkT25jZSA/IGNoZWNrQW5kUnVuRnVuY3Rpb24oKS50aGVuKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgZmlsZSk7XHJcbiAgICAgICAgICAgICAgICB9KSA6IGNiKG51bGwsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgaGFzRXhlY3V0ZWRPbmNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYXRFbmRcIjpcclxuICAgICAgICAgICAgICAgIGNiKG51bGwsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBhdEVuZCA9IGZ1bmN0aW9uKGNiKSB7XHJcbiAgICAgICAgaWYgKGV4ZWN1dGlvbk1vZGUgPT09IFwiYXRFbmRcIikge1xyXG4gICAgICAgICAgICBjaGVja0FuZFJ1bkZ1bmN0aW9uKCkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHBsdWdpbnMudGhyb3VnaDIub2JqKGZvckVhY2gsYXRFbmQpO1xyXG59O1xyXG4iXX0=
