var through     = require( 'through2' ),
    traverse    = require( 'traverse' ),
    util        = require( 'gulp-util' ),
    path        = require( 'path' ),
    File        = util.File,
    PluginError = util.PluginError;

const PLUGIN_NAME = 'gulp-site-config';

module.exports = siteConfig;

module.exports._copyObject = function( obj, otherObj ) {
    for( var prop in obj ) {
        delete obj[ prop ];
    }

    for( var prop in otherObj ) {
        obj[ prop ] = otherObj[ prop ];
    }
}

function siteConfig( configVar, opts ) {

    if( !configVar || typeof configVar !== 'object' ) {
        throw new PluginError( PLUGIN_NAME, 'configVar must be an object!' );
    }

    var config = {};
    opts = opts || {};

    function buildConfig( file, enc, cb ) {

        if( file.isNull() ) {
            cb( null, file );
            return;
        }

        if( file.isStream() ) {
            cb( new PluginError( PLUGIN_NAME, 'Streaming not supported!' ) );
            return;
        }

        if( path.extname( file.path ) !== '.json' ) {
            cb( new PluginError( PLUGIN_NAME, file.path + ' is not a JSON file!' ) );
            return;
        }

        // Removes underscores and .json extensions
        var filePath = path.resolve( file.base, opts.resolve || '.' );
        var relativeFilePath = file.path.replace( filePath + '/', '' );
        var dirStructure = relativeFilePath.split( '/' );
        for( var i = 0; i < dirStructure.length; i++ ) {
            if( dirStructure[ i ].indexOf( '_' ) === 0 ) {
                dirStructure[ i ] = dirStructure[ i ].substring( 1 );
            }
            if( path.extname( dirStructure[ i ] ) ) {
                dirStructure[ i ] = path.basename( dirStructure[ i ], '.json' );
            }
        }

        traverse( config ).set( dirStructure, JSON.parse( file.contents.toString() ) );
        cb( null, file );
    }

    function sendConfig( cb ) {
        module.exports._copyObject( configVar, config );
        cb();
    }

    return through.obj( buildConfig, sendConfig );

}

