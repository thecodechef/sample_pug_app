var should     = require( 'should' ),
    util       = require( 'gulp-util' ),
    File       = util.File,
    siteConfig = require( './' );

// Use package.json file as a test configuration file
var config = require( './package' );

// Actual directory structure for one of my projects
// on my computer
var base = '/home/jeremy/Devel/web/template-site/src/';
var contents = new Buffer( JSON.stringify( config ) );
var testFiles = [
    new File( {
        base: base,
        path: base + '_data.json',
        contents: contents
    } ),
    new File( {
        base: base,
        path: base + 'posts/_data.json',
        contents: contents
    } ),
    new File( {
        base: base,
        path: base + 'posts/cool-stuff/_data.json',
        contents: contents
    } ),
    new File( {
        base: base,
        path: base + 'pages/_data.json',
        contents: contents
    } )
];

describe( 'gulp-site-config', function() {

    describe( '_copyObject()', function() {

        it( 'should deep copy object', function() {

            var objA = {};
            var objB = {
                yo: 69,
                waddup: 6969,
                doe: 696969
            };

            siteConfig._copyObject( objA, objB );

            objA.should.eql( objB );

        } );

        it( 'should overwrite old object', function() {
            
            var objA = {
                test: 'Waddup doe'
            };
            var objB = {
                yo: 69,
                waddup: 6969,
                doe: 696969
            };

            siteConfig._copyObject( objA, objB );

            objA.should.eql( objB );

        } );

    } );

    describe( 'siteConfig()', function() {

        it( 'should not support null files', function() {
            var testConfig = {};
            var stream = siteConfig( testConfig );   

            // Must set a 'data' event listener for 
            // 'end' event to fire
            stream.on( 'data', function() {} );

            stream.on( 'end', function() {
                testConfig.should.eql( {} );
            } );

            stream.write( new File() );
            stream.end();
        } );

        it( 'should not support streams', function() {
            var stream = siteConfig( {} );
            var fakeStream = util.noop();
            fakeStream.write( new Buffer( 'wa' ) );
            fakeStream.write( new Buffer( 'dup' ) );
            fakeStream.end();

            var fileIndex = 0;
            stream.on( 'data', function( file ) {
                file.should.eql( testFiles[ fileIndex++ ] );
            } );

            stream.on( 'error', function( err ) {
                err.message.should.equal( 'Streaming not supported!' );
            } );

            stream.write( testFiles[ 0 ] );
            stream.write( new File( {
                contents: fakeStream
            } ) );
            stream.write( testFiles[ 1 ] );
            stream.end();
        } );

        it( 'should throw error on non-JSON file', function() {
            var stream = siteConfig( {} );
            var fakeFile = new File( {
                base: base,
                path: '_data.xml',
                contents: contents
            } );

            stream.on( 'error', function( err ) {
                err.message.should.equal( fakeFile.path + ' is not a JSON file!' );
            } );

            stream.write( fakeFile );
            stream.end();
        } );

        it( 'should throw error on non-truthy value', function() {
            siteConfig.should.throw();
        } );

        it( 'should throw error on non-Object', function() {
            ( function() {
                siteConfig( 1 );
            } ).should.throw();
            ( function() {
                siteConfig( 'Yo' );
            } ).should.throw();
        } );

        it( 'should populate config variable', function() {
            var testConfig = {};
            var stream = siteConfig( testConfig );

            stream.on( 'data', function() {} );

            stream.on( 'end', function() {
                Object.keys( testConfig ).should.be.ok; 
            } );

            for( var i = 0; i < testFiles.length; i++ ) {
                stream.write( testFiles[ i ] );
            }
            stream.end();
        } );

        it( 'should map directory structure to object structure', function() {
            var testConfig = {};
            var stream = siteConfig( testConfig );

            stream.on( 'data', function() {} );

            stream.on( 'end', function() {
                // Using [] object accessors to make it clear
                // we're accessing the config keys
                testConfig.should.have.property( 'data' );
                testConfig.should.have.property( 'posts' );
                testConfig.should.have.property( 'pages' );

                testConfig[ 'posts' ].should.have.property( 'data' );
                testConfig[ 'posts' ].should.have.property( 'cool-stuff' );

                testConfig[ 'posts' ][ 'cool-stuff' ].should.have.property( 'data' );
                testConfig[ 'pages' ].should.have.property( 'data' );
            } );


            for( var i = 0; i < testFiles.length; i++ ) {
                stream.write( testFiles[ i ] );
            }
            stream.end();
        } );

        it( 'should map config to key', function() {
            var testConfig = {};
            var stream = siteConfig( testConfig );

            stream.on( 'data', function() {} );

            stream.on( 'end', function() {
                config.should.eql( testConfig.data );
            } );

            stream.write( testFiles[ 0 ] );
            stream.end();
        } );

        it( 'should resolve config structure', function() {
            var testConfig = {};
            var stream = siteConfig( testConfig, { resolve: '..' } );

            stream.on( 'data', function() {} );

            stream.on( 'end', function() {
                testConfig.should.have.property( 'src' );
                testConfig[ 'src' ].should.have.property( 'posts' );
                testConfig[ 'src' ].should.have.property( 'pages' );
            } );

            for( var i = 0; i < testFiles.length; i++ ) {
                stream.write( testFiles[ i ] );
            }
            stream.end();
        } );

    } );

} );