var assert = require("assert");
var File = require("vinyl");
var gulpArrange = require("./index");

describe("gulp-arrange", function () {
  var fileOne = new File({
    base: "test/subdirectory",
    path: "test/subdirectory/fileOne.js",
    relative: "fileOne.js"
  });
  var fileTwo = new File({
    base: "test/subdirectory",
    path: "test/subdirectory/fileTwo.js",
    relative: "fileTwo.js"
  });
  var fileThree = new File({
    base: "test/.subdirectory",
    path: "test/.subdirectory/fileThree.js",
    relative: "fileThree.js"
  });
  var fileFour = new File({
    base: "test/subdirectory",
    path: "test/subdirectory/fileFour.js",
    relative: "fileFour.js"
  });
  var fileFive = new File({
    base: "test/subdirectory",
    path: "test/subdirectory/fileFive.js",
    relative: "fileFive.js"
  });
  var fileSix = new File({
    base: "test/subdirectory",
    path: "test/subdirectory/fileSix.js",
    relative: "fileSix.js"
  });

  describe("glob", function () {
    it("should move a file", function (done) {
      var stream = gulpArrange({
        patterns: ["test/*subdirectory/fileThree.js", "**/fileOne.js", "**/fileFive.js", "**/fileTwo.js"],
        fileAttribute: "path",
        options: {
          dot: true
        }
      });

      var index = 0;
      var indexFileOne;
      var indexFileTwo;
      var indexFileThree;
      var indexFileFive;
      stream.on("data", function (file) {
        switch(file.relative) {
          case "fileOne.js":
            indexFileOne = index;
            break;
          case "fileTwo.js":
            indexFileTwo = index;
            break;
          case "fileThree.js":
            indexFileThree = index;
            break;
          case "fileFive.js":
            indexFileFive = index;
            break;
        }
        index++;
      });

      stream.on("end", function () {
        assert(indexFileThree < indexFileOne);
        assert(indexFileOne < indexFileFive);
        assert(indexFileFive < indexFileTwo);
        done();
      });

      stream.write(fileOne);
      stream.write(fileTwo);
      stream.write(fileThree);
      stream.write(fileFour);
      stream.write(fileFive);
      stream.write(fileSix);
      stream.end();
    });
  });
  
   describe("regex", function () {
    it("should move a file", function (done) {
      var stream = gulpArrange({
        patterns: ["fileFive.js", "fileOne.js", "fileThree.js", "fileSix.js", "fileFour.js", "fileTwo.js"],
        usesRegex: true
      });

      var index = 0;
      var indexFileOne;
      var indexFileTwo;
      var indexFileThree;
      var indexFileFour;
      var indexFileFive;
      var indexFileSix;
      stream.on("data", function (file) {
        switch(file.relative) {
            case "fileOne.js":
            indexFileOne = index;
            break;
          case "fileTwo.js":
            indexFileTwo = index;
            break;
          case "fileThree.js":
            indexFileThree = index;
            break;
          case "fileFour.js":
            indexFileFour = index;
            break;
          case "fileFive.js":
            indexFileFive = index;
            break;
          case "fileSix.js":
            indexFileSix = index;
            break;
        }
        index++;
      });

      stream.on("end", function () {
        assert(indexFileFive < indexFileOne);
        assert(indexFileOne < indexFileThree);
        assert(indexFileThree < indexFileSix);
        assert(indexFileSix < indexFileFour);
        assert(indexFileFour < indexFileTwo);
        done();
      });

      stream.write(fileOne);
      stream.write(fileTwo);
      stream.write(fileThree);
      stream.write(fileFour);
      stream.write(fileFive);
      stream.write(fileSix);
      stream.end();
    });
  });
});