'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

// native imports
var path = require('path');

/**
* defaults:
**/

// regex to filer which plugins to laod
var R_PLUGINS = /^(gulp|vinyl)\-/;

// transform plugin name to hash key
var F_TRANSFORM = function F_TRANSFORM(s_dep) {

	// strip first word from plugin name
	return s_dep.replace(/^(\w+)\-(.+)$/, '$2')

	// replace hyphens with underscore
	.replace(/\-/g, '_');
};

// directory relative from root where...
var S_SRC_DIR = 'lib'; //...source files are
var S_DEST_DIR = 'dist'; //...build output goes
var S_RECIPE_DIR = 'gulp'; //...gulp task recipes are

//
var error = function error(s_msg) {
	var e_error = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	if (!e_error) {
		e_error = new Error();
		e_error.stack = 'Error:\n' + s_msg;
	} else {
		e_error.stack = 'Error:\n' + s_msg + '\n\n' + e_error.stack;
	}
	throw e_error;
};

/**
* main:
**/
module.exports = function (gulp) {
	var h_config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];


	/**
 * load plugins:
 **/

	// ref gulpfile dir (project root)
	var p_root = path.dirname(module.parent.parent.filename);

	// plugin options
	var h_plugin_options = h_config.plugins || {};

	// ref plugin regex
	var r_plugins = h_plugin_options.pattern || R_PLUGINS;

	// ref plugin transform
	var f_transform = h_plugin_options.transform || F_TRANSFORM;

	// prep plugins hash
	var h_plugins = void 0;

	// prep devDependencies hash
	var h_dev_dependencies = {};

	// load plugins
	var plugins = function plugins() {
		// not yet cached
		if (!h_plugins) {
			// make plugins hash
			h_plugins = {};

			// load module's package.json
			h_dev_dependencies = require(path.join(p_root, 'package.json')).devDependencies;

			// fetch dev dependencies from package.json
			Object.keys(h_dev_dependencies)
			// each gulp plugin (or whatever matches the regex)
			.forEach(function (s_dep) {

				// found gulp plugin
				if (r_plugins.test(s_dep)) {

					// skip loading this package
					if ('gulp-soda' === s_dep) return;

					// make npm require path to plugin
					var p_plugin = path.join(p_root, 'node_modules', s_dep);

					// transform name to key, load plugin into hash
					h_plugins[f_transform(s_dep)] = require(p_plugin);
				}
			});
		}

		return h_plugins;
	};

	/**
 * load recipes:
 **/

	// ref recipe dir
	var s_recipe_dir = h_config.recipes || S_RECIPE_DIR;

	// ref recipe directory
	var p_recipe_dir = path.join(p_root, s_recipe_dir);

	/**
 * make tasks:
 **/

	// prep task info hash
	var h_task_info = {};

	// ref global config
	var h_global_config = h_config.config || {};

	// ref domain & range
	var h_domain = h_config.domain || {};
	var h_range = h_config.range || {};

	// ref src and dest root
	var s_src_dir = h_config.src || S_SRC_DIR;
	var s_dest_dir = h_config.dest || S_DEST_DIR;

	// ref options
	var h_options = h_config.options || {};

	// prep task lists hash
	var h_task_lists = {};

	// track empty task dependencies
	var h_empty_tasks = {};

	// each dir target in domain

	var _loop = function _loop(s_dir) {

		// ref range
		var a_range = h_domain[s_dir];

		// assure range is array
		if ('string' === typeof a_range) a_range = [a_range];

		// prep list of defaults for directory task list
		var a_defaults = [];

		// prep groups hash for gourping same names of different outputs
		var h_groups = {};

		// each range in array
		a_range.forEach(function (s_range_target) {

			// extract labels from range target

			var _s_range_target$split = s_range_target.split(/\s*[:\s]\s*/);

			var _s_range_target$split2 = _slicedToArray(_s_range_target$split, 2);

			var s_range = _s_range_target$split2[0];
			var s_task_dest_dir = _s_range_target$split2[1];

			// ref recipe list

			var a_recipe_list = h_range[s_range];

			// create src and dest paths
			var p_src = path.join(s_src_dir, s_dir);
			var p_dest = path.join(s_task_dest_dir || s_dest_dir, s_dir);

			// each recipe
			a_recipe_list.forEach(function (s_recipe_target, i_recipe) {

				// extract recipe name and its dependencies from target string

				var _s_recipe_target$spli = s_recipe_target.split(/\s*[:\s]\s*/g);

				var _s_recipe_target$spli2 = _toArray(_s_recipe_target$spli);

				var s_recipe = _s_recipe_target$spli2[0];

				var a_deps = _s_recipe_target$spli2.slice(1);

				// task is empty (no recipe)


				var b_empty_task = '[' === s_recipe[0];
				if (b_empty_task) {
					s_recipe = s_recipe.slice(1, -1);
				}

				// make task name
				var s_task = s_recipe + '-' + s_dir;

				// ref task name mod
				var s_task_mod = '';

				// there are multiple ranges
				if (a_range.length > 1) {
					//	shift task name to group name
					var s_group = s_task;

					// ref group
					var a_group = h_groups[s_group] || (h_groups[s_group] = []);

					// create distinguished task name
					s_task_mod = '-' + s_range;
					s_task += s_task_mod;

					// add this task name to the group
					a_group.push(s_task);
				}

				// this recipe is 0th target in domain, add it to the defaults
				if (0 === i_recipe) {
					a_defaults.push(s_task);
				}

				// make dpes for this task
				var a_task_deps = a_deps.map(function (s_dep) {
					return s_dep + '-' + s_dir + s_task_mod;
				});
				a_task_deps.forEach(function (s_other_task, i_other_task) {
					// ref empty task's dependencies if exists
					var a_empty_deps = h_empty_tasks[s_other_task];

					// it actually is an empty task
					if (a_empty_deps) {
						// append all its dependencies to this list
						a_task_deps.push.apply(a_task_deps, _toConsumableArray(a_empty_deps));

						// remove dependency to empty task
						a_task_deps.splice(i_other_task, 1);
					}
				});

				// make options hash for this task, save to persistent options hash
				var h_task_options = Object.assign({}, h_options['*'] || {}, h_options[s_recipe] || {}, h_options[s_task] || {});

				// make src glob
				var p_task_src = path.join(p_src, h_task_options.src || '');

				// save to task info
				h_task_info[s_task] = {
					src: p_task_src,
					dest: p_dest,
					deps: a_task_deps,
					options: h_task_options
				};

				// dependencies-only recipe; make task
				if (b_empty_task) {
					h_empty_tasks[s_task] = a_task_deps;
					return gulp.task(s_task, a_task_deps);
				}

				// make task, such that only once it is called do we make moves
				gulp.task(s_task, a_task_deps, function (f_done_task) {

					// only once this task is called, load the recipe script
					var f_recipe = void 0;
					try {
						f_recipe = require(path.join(p_recipe_dir, s_recipe) + '.js');
					} catch (e_load_recipe) {
						if ('MODULE_NOT_FOUND' === e_load_recipe.code) {
							error('no such recipe "' + s_recipe + '" found in recipe directory "' + s_recipe_dir + '" {' + (path.join(p_recipe_dir, s_recipe) + '.js') + '}');
						} else {
							error('script recipe "' + s_recipe + '" has a syntax/runtime error:', e_load_recipe);
						}
					}

					// recipe is kind enough to require plugins
					if (f_recipe.plugins) {
						// make plugins hash
						plugins();

						// check each plugin
						f_recipe.plugins.forEach(function (s_plugin) {
							// plugin is missing from devDependencies
							if (!h_dev_dependencies[s_plugin]) {
								console.error('\nWARNING: the "' + s_recipe + '" recipe was kind enough to declare that it requires the "' + s_plugin + '" plugin to function properly; you currently do NOT have such a plugin listed in your package.json\'s devDependencies. This could be the reason for any errors you are getting\n');
							}
						});
					}

					// forward control to recipe
					var z_return = f_recipe.apply({
						// source directory
						src_dir: p_src,

						// set sub directory destination within destination dir
						sub_dest: function sub_dest(s_sub_dir) {
							return path.join(s_task_dest_dir || s_dest_dir, s_sub_dir);
						},

						// config settings
						config: h_global_config,

						// task name
						task: s_task,

						// task dependencies
						deps: a_task_deps,

						// task options
						options: h_task_options,

						// allow recipe to ref other dependencies
						other: function other(s_dep) {
							return s_dep + '-' + s_dir + s_task_mod;
						},

						// allow recipe to ref other src
						friend: function friend(s_dep) {
							return h_task_info[s_dep];
						}
					}, [gulp, plugins(), p_task_src, p_dest, f_done_task]);

					// recipe did not ask for async callback
					if (!z_return && f_recipe.length <= 4) {
						// callback on next event loop pass
						setImmediate(function () {
							f_done_task();
						});
					}

					// return whatever recipe did
					return z_return;
				});

				// ref corresponding task list
				var a_task_list = h_task_lists[s_recipe];

				// corresponding task list does not yet exist; create it
				if (!a_task_list) a_task_list = h_task_lists[s_recipe] = [];

				// append task name to its corresponding task list
				a_task_list.push(s_task);
			});
		});

		// there are multiple outputs
		for (var s_group_name in h_groups) {
			// create task group
			gulp.task(s_group_name, h_groups[s_group_name]);
		}

		// create defaults task group
		gulp.task(s_dir, a_defaults);
	};

	for (var s_dir in h_domain) {
		_loop(s_dir);
	}

	/**
 * append shortcut tasks:
 **/

	// build default tasks for each type
	for (var s_general_task in h_task_lists) {
		var a_deps = h_task_lists[s_general_task];

		// link dependencies to trigger those tasks
		gulp.task(s_general_task, a_deps);
	}

	// ref aliases from config
	var h_aliases = h_config.aliases;

	// add aliases
	Object.keys(h_aliases || {}).forEach(function (s_alias) {
		var a_tasks = h_aliases[s_alias];

		// register alias task
		gulp.task(s_alias, a_tasks);
	});

	// register default task
	gulp.task('default', Object.keys(h_domain));
};
//# sourceMappingURL=data:application/json;base64,
